package bsh

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestParseBsh(t *testing.T) {
	assert := assert.New(t)
	data := []byte{0x42, 0x53, 0x48, 0x00, 0xA8, 0x11, 0x41, 0x00, 0x40, 0x00, 0x00, 0x00, 0xFB, 0x60, 0x40, 0x00, 0x1C, 0x02, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x00, 0xBC, 0x00, 0x00, 0x00, 0xEC, 0x00, 0x00, 0x00, 0x1C, 0x01, 0x00, 0x00, 0x50, 0x01, 0x00, 0x00, 0x84, 0x01,
		0x00, 0x00, 0xB0, 0x01, 0x00, 0x00, 0xE8, 0x01, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x01, 0x03, 0xFE, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF, 0x01, 0x02, 0xFE, 0xFF, 0xFE,
		0x00, 0x02, 0xFE, 0xFF, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x01, 0x03, 0xFE, 0xFE, 0xFF, 0xFF, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x00, 0x03, 0xFE, 0xFE, 0xFF, 0xFE, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x01, 0x02,
		0xFE, 0xFF, 0xFE, 0x01, 0x02, 0xFE, 0xFF, 0xFF, 0xFE, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x04, 0xFE, 0xFE, 0xFE, 0xFF, 0xFE, 0x03, 0x02, 0xFE, 0xFF, 0xFE, 0x02, 0x02, 0xFE, 0xFF, 0xFE, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x00, 0x05,
		0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFE, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x05, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFE, 0x03, 0x02, 0xFE, 0xFF, 0xFE, 0x02, 0x02, 0xFE, 0xFF, 0xFE, 0x03, 0x02, 0xFE, 0xFF, 0xFE, 0x00, 0x05, 0xFE,
		0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x02, 0x02, 0xFE, 0xFF, 0xFE, 0x01, 0x03, 0xFE, 0xFE, 0xFF, 0xFE, 0x00, 0x04, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0x00, 0x05, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFE, 0x02, 0x02,
		0xFE, 0xFF, 0xFF, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x05, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF, 0xFE, 0x00, 0x05, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFE, 0x03, 0x02, 0xFE, 0xFF, 0xFE, 0x00, 0x04, 0xFE, 0xFE,
		0xFE, 0xFF, 0xFF, 0xFE, 0xFE, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x01, 0x04, 0xFE, 0xFE, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF, 0xFE, 0x00, 0x05, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF, 0x01, 0x02, 0xFE, 0xFF,
		0xFE, 0x01, 0x03, 0xFE, 0xFE, 0xFF, 0xFF, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x04, 0xFE, 0xFE, 0xFE, 0xFF, 0xFE, 0x02, 0x02, 0xFE, 0xFF, 0xFE, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x01, 0x02, 0xFE, 0xFF,
		0xFF, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x01, 0x03, 0xFE, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x01, 0x03, 0xFE, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x00, 0x05,
		0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFE, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x01, 0x03, 0xFE, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x00, 0x05, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFE, 0x03, 0x02, 0xFE,
		0xFF, 0xFE, 0x00, 0x04, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFE}
	bsh, err := ParseBsh(data)
	assert.Nil(err)
	assert.Len(bsh, 10)
	assert.Equal(bsh[0].Header.Height, 7)
	assert.Equal(bsh[9].Header.Width, 7)

}

func TestTestToInt(t *testing.T) {
	assert := assert.New(t)
	data := []byte{0x11, 0x22, 0x33, 0x44}
	i := ToInt(data)
	assert.Equal(i, 0x44332211)
}
