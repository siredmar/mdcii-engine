package bsh

import (
	"os"
	"testing"

	"github.com/siredmar/mdcii-engine/pkg/palette"
	"github.com/stretchr/testify/assert"
)

func TestNewPng(t *testing.T) {
	assert := assert.New(t)

	bshdata := []byte{0x42, 0x53, 0x48, 0x00, 0xA8, 0x11, 0x41, 0x00, 0x40, 0x00, 0x00, 0x00, 0xFB, 0x60, 0x40, 0x00, 0xB0, 0x02, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0xA8, 0x00, 0x00, 0x00, 0xE4, 0x00, 0x00, 0x00, 0x24, 0x01, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0xA8, 0x01, 0x00, 0x00, 0xEC, 0x01,
		0x00, 0x00, 0x24, 0x02, 0x00, 0x00, 0x6C, 0x02, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x01, 0x03, 0xFE, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF, 0x01, 0x02, 0xFE, 0xFF, 0xFE,
		0x00, 0x02, 0xFE, 0xFF, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x01, 0x03, 0xFE, 0xFE, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, 0x00,
		0x00, 0x00, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x00, 0x03, 0xFE, 0xFE, 0xFF, 0xFE, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x01, 0x02, 0xFE, 0xFF, 0xFF, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x3C, 0x00, 0x00, 0x00, 0x01, 0x03, 0xFE, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x03, 0x02, 0xFE, 0xFF, 0xFE, 0x02, 0x02, 0xFE, 0xFF, 0xFE, 0x02, 0x02, 0xFE, 0xFF, 0xFE, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x00, 0x05, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFE, 0x0A, 0x00,
		0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x03, 0xFE, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x03, 0x02, 0xFE, 0xFF, 0xFE, 0x02, 0x02, 0xFE, 0xFF, 0xFE, 0x03, 0x02, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF, 0x01, 0x02,
		0xFE, 0xFF, 0xFE, 0x01, 0x03, 0xFE, 0xFE, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x02, 0xFE, 0xFF, 0xFE, 0x02, 0x03, 0xFE, 0xFE, 0xFF, 0xFE, 0x01, 0x04, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF,
		0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x00, 0x06, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFE, 0x03, 0x02, 0xFE, 0xFF, 0xFE, 0x03, 0x02, 0xFE, 0xFF, 0xFF, 0xFE, 0xFE, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x05, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFE,
		0x00, 0x02, 0xFE, 0xFF, 0xFE, 0x00, 0x04, 0xFE, 0xFE, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x03, 0x02, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x01, 0x03, 0xFE, 0xFE, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00,
		0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x01, 0x03, 0xFE, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF, 0xFE, 0x00, 0x04, 0xFE, 0xFE, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF,
		0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x01, 0x03, 0xFE, 0xFE, 0xFF, 0xFF, 0xFE, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x05, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFE, 0x03, 0x02, 0xFE, 0xFF, 0xFE, 0x02, 0x02, 0xFE, 0xFF, 0xFE, 0x02, 0x02, 0xFE, 0xFF,
		0xFE, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x01, 0x02, 0xFE, 0xFF, 0xFF, 0xFE, 0xFE, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x01, 0x03, 0xFE, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x00,
		0x02, 0xFE, 0xFF, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x01, 0x03, 0xFE, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x01, 0x03, 0xFE, 0xFE, 0xFF, 0xFF, 0xFE, 0xFE, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00,
		0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x01, 0x03, 0xFE, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF, 0x01, 0x02, 0xFE, 0xFF, 0xFE, 0x01, 0x04, 0xFE, 0xFE, 0xFE, 0xFF, 0xFE, 0x03, 0x02, 0xFE, 0xFF, 0xFE, 0x00, 0x02, 0xFE, 0xFF, 0x01, 0x02, 0xFE, 0xFF,
		0xFE, 0x01, 0x03, 0xFE, 0xFE, 0xFF, 0xFF, 0xFE}
	bsh, err := ParseBsh(bshdata)
	assert.Nil(err)

	paletteData := []byte{
		0x43, 0x4F, 0x4C, 0x00, 0xA8, 0x11, 0x41, 0x00, 0x40, 0x00, 0x00, 0x00, 0x7B, 0x60, 0x40, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x6D, 0x1F, 0x6C, 0x00, 0x00, 0x80, 0x80, 0x00, 0xC0, 0xC0,
		0xC0, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x0B, 0x06, 0x03, 0x00, 0x15, 0x08, 0x00, 0x00, 0x25, 0x04, 0x00, 0x00, 0x00, 0x14, 0x04, 0x00, 0x06, 0x16, 0x06, 0x00, 0x00, 0x21, 0x00, 0x00,
		0x03, 0x26, 0x03, 0x00, 0x0E, 0x1C, 0x05, 0x00, 0x08, 0x31, 0x04, 0x00, 0x20, 0x18, 0x00, 0x00, 0x1B, 0x2C, 0x00, 0x00, 0x0A, 0x0C, 0x12, 0x00, 0x08, 0x1C, 0x14, 0x00, 0x18, 0x16, 0x10, 0x00, 0x23, 0x17, 0x0C, 0x00, 0x01, 0x29, 0x15, 0x00, 0x0C, 0x2C, 0x13, 0x00, 0x18, 0x2B, 0x11, 0x00, 0x23, 0x29,
		0x0F, 0x00, 0x0A, 0x16, 0x25, 0x00, 0x0A, 0x2C, 0x25, 0x00, 0x24, 0x1F, 0x1F, 0x00, 0x22, 0x31, 0x1D, 0x00, 0x12, 0x24, 0x2C, 0x00, 0x26, 0x2E, 0x29, 0x00, 0x13, 0x22, 0x40, 0x00, 0x04, 0x3D, 0x06, 0x00, 0x10, 0x3B, 0x06, 0x00, 0x15, 0x3E, 0x08, 0x00, 0x25, 0x3D, 0x04, 0x00, 0x0E, 0x3C, 0x28, 0x00,
		0x21, 0x3B, 0x23, 0x00, 0x29, 0x3D, 0x20, 0x00, 0x0E, 0x37, 0x40, 0x00, 0x18, 0x3D, 0x3D, 0x00, 0x21, 0x31, 0x3D, 0x00, 0x25, 0x3D, 0x39, 0x00, 0x11, 0x3A, 0x48, 0x00, 0x29, 0x3D, 0x42, 0x00, 0x11, 0x3C, 0x4E, 0x00, 0x11, 0x3A, 0x5E, 0x00, 0x0D, 0x4D, 0x00, 0x00, 0x25, 0x4E, 0x00, 0x00, 0x12, 0x4D,
		0x08, 0x00, 0x17, 0x4D, 0x25, 0x00, 0x1C, 0x4D, 0x48, 0x00, 0x19, 0x4D, 0x58, 0x00, 0x16, 0x49, 0x6E, 0x00, 0x11, 0x5F, 0x03, 0x00, 0x25, 0x62, 0x00, 0x00, 0x16, 0x5D, 0x3D, 0x00, 0x16, 0x70, 0x2D, 0x00, 0x15, 0x96, 0x24, 0x00, 0x19, 0x7C, 0x6B, 0x00, 0x1C, 0x94, 0x71, 0x00, 0x00, 0x52, 0x8C, 0x00,
		0x08, 0x4A, 0x90, 0x00, 0xF8, 0xC2, 0x30, 0x00, 0x08, 0x52, 0x94, 0x00, 0x08, 0x56, 0x94, 0x00, 0x0C, 0x4E, 0x8C, 0x00, 0x17, 0x52, 0x88, 0x00, 0x00, 0x63, 0x8C, 0x00, 0x18, 0x5E, 0x8C, 0x00, 0x08, 0x5A, 0x9C, 0x00, 0x0C, 0x5A, 0xA0, 0x00, 0x12, 0x63, 0x94, 0x00, 0x12, 0x65, 0x94, 0x00, 0x0A, 0x75,
		0x96, 0x00, 0x08, 0x5A, 0xAD, 0x00, 0x08, 0x63, 0xA9, 0x00, 0x0C, 0x67, 0xA5, 0x00, 0x15, 0x68, 0xA5, 0x00, 0x06, 0x79, 0xAD, 0x00, 0x13, 0x73, 0xAB, 0x00, 0x21, 0x73, 0xA5, 0x00, 0x0A, 0x76, 0xB5, 0x00, 0x18, 0x77, 0xB1, 0x00, 0x21, 0x73, 0xAD, 0x00, 0x21, 0x7B, 0xB1, 0x00, 0x18, 0x75, 0xBB, 0x00,
		0x08, 0x88, 0xBD, 0x00, 0x0B, 0x88, 0xC4, 0x00, 0x11, 0x88, 0xDC, 0x00, 0x21, 0x9C, 0x84, 0x00, 0x00, 0x9C, 0x94, 0x00, 0x18, 0x9C, 0xB1, 0x00, 0x00, 0x9C, 0xD6, 0x00, 0x0C, 0x94, 0xCE, 0x00, 0xC4, 0x78, 0x5E, 0x00, 0x0B, 0xAD, 0xD8, 0x00, 0x08, 0x94, 0xE7, 0x00, 0x08, 0x94, 0xEF, 0x00, 0x0C, 0xA0,
		0xE6, 0x00, 0x1C, 0x98, 0xE2, 0x00, 0x15, 0xB2, 0xE1, 0x00, 0x10, 0xB1, 0xEF, 0x00, 0x18, 0xBD, 0xE7, 0x00, 0x21, 0xBD, 0xDE, 0x00, 0x00, 0x94, 0xF7, 0x00, 0x50, 0x96, 0xE2, 0x00, 0x00, 0x9C, 0xFF, 0x00, 0xE0, 0x8A, 0x6C, 0x00, 0xF2, 0x99, 0x7A, 0x00, 0xE9, 0x71, 0x02, 0x00, 0xFF, 0x7D, 0x02, 0x00,
		0x08, 0xA5, 0xF7, 0x00, 0xFB, 0xD8, 0x34, 0x00, 0xF4, 0xAF, 0x2D, 0x00, 0x10, 0x9C, 0xF7, 0x00, 0x18, 0x94, 0xEF, 0x00, 0x14, 0x98, 0xFB, 0x00, 0xFF, 0xFC, 0x9D, 0x00, 0x21, 0xA5, 0xF7, 0x00, 0x36, 0x11, 0x04, 0x00, 0x4A, 0x11, 0x04, 0x00, 0x35, 0x2D, 0x0C, 0x00, 0x46, 0x2C, 0x0B, 0x00, 0x3C, 0x4A,
		0x0B, 0x00, 0x29, 0x63, 0x00, 0x00, 0x3B, 0x5A, 0x13, 0x00, 0x2D, 0x67, 0x00, 0x00, 0x2E, 0x70, 0x00, 0x00, 0x2D, 0x63, 0x08, 0x00, 0x2C, 0x6A, 0x11, 0x00, 0x37, 0x6D, 0x02, 0x00, 0x37, 0x6A, 0x11, 0x00, 0x42, 0x6A, 0x03, 0x00, 0x44, 0x6C, 0x10, 0x00, 0x3B, 0x2F, 0x26, 0x00, 0x3E, 0x44, 0x29, 0x00,
		0x3B, 0x3D, 0x40, 0x00, 0x3D, 0x4A, 0x3F, 0x00, 0x3C, 0x61, 0x2D, 0x00, 0x41, 0x5B, 0x44, 0x00, 0x3F, 0x4D, 0x4B, 0x00, 0x3C, 0x63, 0x4B, 0x00, 0x31, 0x4C, 0x5A, 0x00, 0x3F, 0x4B, 0x55, 0x00, 0x2E, 0x62, 0x5A, 0x00, 0x41, 0x65, 0x56, 0x00, 0x3A, 0x5F, 0x68, 0x00, 0x37, 0x62, 0x75, 0x00, 0x37, 0x66,
		0x8C, 0x00, 0x5E, 0x16, 0x05, 0x00, 0x59, 0x2A, 0x14, 0x00, 0x5A, 0x40, 0x1A, 0x00, 0x59, 0x60, 0x0B, 0x00, 0x5A, 0x5E, 0x2D, 0x00, 0x58, 0x50, 0x46, 0x00, 0x57, 0x66, 0x44, 0x00, 0x59, 0x4F, 0x50, 0x00, 0x55, 0x67, 0x50, 0x00, 0x5D, 0x6B, 0x4D, 0x00, 0x5A, 0x58, 0x59, 0x00, 0x56, 0x6F, 0x5A, 0x00,
		0x57, 0x63, 0x62, 0x00, 0x58, 0x66, 0x75, 0x00, 0x73, 0x21, 0x0A, 0x00, 0x71, 0x41, 0x14, 0x00, 0x6F, 0x5F, 0x11, 0x00, 0x6F, 0x52, 0x39, 0x00, 0x6C, 0x6F, 0x41, 0x00, 0x6F, 0x6B, 0x5A, 0x00, 0x6B, 0x68, 0x6B, 0x00, 0x8F, 0x1D, 0x04, 0x00, 0x89, 0x56, 0x0D, 0x00, 0x8C, 0x58, 0x1F, 0x00, 0x89, 0x63,
		0x40, 0x00, 0xAC, 0x27, 0x05, 0x00, 0xA6, 0x5D, 0x25, 0x00, 0xC5, 0x31, 0x08, 0x00, 0xCD, 0x54, 0x1E, 0x00, 0x29, 0x7E, 0x02, 0x00, 0x31, 0x7B, 0x00, 0x00, 0x35, 0x7F, 0x00, 0x00, 0x42, 0x7B, 0x00, 0x00, 0x34, 0x7B, 0x0B, 0x00, 0x36, 0x7B, 0x14, 0x00, 0x36, 0x7A, 0x49, 0x00, 0x31, 0x84, 0x04, 0x00,
		0x42, 0x84, 0x00, 0x00, 0x31, 0x84, 0x14, 0x00, 0x40, 0x84, 0x16, 0x00, 0x35, 0x8C, 0x00, 0x00, 0x35, 0x86, 0x37, 0x00, 0x31, 0x8D, 0x32, 0x00, 0x31, 0xA7, 0x1D, 0x00, 0x53, 0x82, 0x09, 0x00, 0x5B, 0x7E, 0x3E, 0x00, 0x57, 0x79, 0x6B, 0x00, 0x6C, 0x7B, 0x67, 0x00, 0x52, 0xAB, 0x06, 0x00, 0x55, 0x91,
		0x2F, 0x00, 0x59, 0xB6, 0x29, 0x00, 0x77, 0x7E, 0x3C, 0x00, 0x77, 0x77, 0x69, 0x00, 0x74, 0xB4, 0x30, 0x00, 0xAA, 0x80, 0x2A, 0x00, 0x91, 0x7D, 0x67, 0x00, 0x85, 0xBB, 0x3A, 0x00, 0xCA, 0xAC, 0x34, 0x00, 0x2B, 0x85, 0x74, 0x00, 0x53, 0x7F, 0x73, 0x00, 0x7F, 0x7C, 0x73, 0x00, 0x7D, 0x8E, 0x73, 0x00,
		0x4A, 0x7E, 0x7E, 0x00, 0x49, 0x80, 0xA4, 0x00, 0x76, 0x84, 0x7B, 0x00, 0x76, 0x87, 0x8F, 0x00, 0x2B, 0xA0, 0x7C, 0x00, 0x5F, 0x9C, 0x84, 0x00, 0x2D, 0xB5, 0x88, 0x00, 0x3F, 0xC1, 0x8A, 0x00, 0x5C, 0xA9, 0xBD, 0x00, 0x3F, 0xDE, 0xA7, 0x00, 0x56, 0xED, 0xC8, 0x00, 0x90, 0x89, 0x7B, 0x00, 0x8D, 0x99,
		0x85, 0x00, 0x98, 0x95, 0x7F, 0x00, 0xAF, 0x9A, 0x7C, 0x00, 0x98, 0xA5, 0x8C, 0x00, 0x98, 0xB2, 0x8D, 0x00, 0xA9, 0xB0, 0x8C, 0x00, 0xCC, 0xC2, 0x85, 0x00, 0x9A, 0xB0, 0xAD, 0x00, 0xB9, 0xB6, 0xA0, 0x00, 0xB3, 0xC8, 0xA7, 0x00, 0xAC, 0xD1, 0xCF, 0x00, 0xDD, 0xDA, 0xB5, 0x00, 0xE1, 0xEF, 0xE2, 0x00,
		0xFE, 0xFA, 0xE6, 0x00, 0x00, 0x94, 0xFF, 0x00, 0xA0, 0xA0, 0xA4, 0x00, 0x80, 0x80, 0x80, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00}

	palette, err := palette.ParsePalette(paletteData)
	assert.Nil(err)
	assert.Len(bsh, 3)
	b := BshPng{
		Bsh:     bsh,
		Palette: palette,
	}
	err = b.Convert(1, "image.png")
	assert.Nil(err)
	err = os.Remove("image.png")
	assert.Nil(err)
}
