package chunks

import (
	"fmt"
	"log"
	"testing"

	"github.com/ghostiam/binstruct"
	"github.com/stretchr/testify/assert"
)

func TestChunk(t *testing.T) {
	data := []byte{0x49, 0x4E, 0x53, 0x45, 0x4C, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x1E, 0x00, 0x78, 0x00, 0x1E, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x11, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}

	var actual chunkRaw
	err := binstruct.UnmarshalLE(data, &actual)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf("%+v", actual)

	// Output:
	// {Arr:[1 2 3 4]}

}

func TestChunkInsel5(t *testing.T) {
	assert := assert.New(t)
	data := []byte{0x49, 0x4E, 0x53, 0x45, 0x4C, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x1E, 0x00, 0x78, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x07, 0x00, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x11, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	c, err := NewChunk(data)
	assert.Nil(err)
	assert.Equal(c.Id, "INSEL5")
	assert.Equal(c.Length, 116)
	assert.Equal(uint8(0), c.Data[0])
	assert.Equal(uint8(0x1E), c.Data[1])
	assert.Equal(uint8(0x00), c.Data[66])
	assert.Equal(uint8(0x83), c.Data[92])
	assert.Equal(uint8(0x00), c.Data[115])
}

func TestChunkHeader(t *testing.T) {
	assert := assert.New(t)
	data := []byte{0x42, 0x53, 0x48, 0x00, 0xA8, 0x11, 0x41, 0x00, 0x40, 0x00, 0x00, 0x00, 0xFB, 0x60, 0x40, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0xB4, 0x00, 0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0xDC, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0xFE, 0xFE, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0xFE, 0xFE, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0xFE, 0xFE, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0xFE, 0xFE, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0xFE, 0xFE, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0xFE, 0xFE, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0xFE, 0xFE, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0xFE, 0xFE, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0xFE, 0xFE, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0xFE, 0xFE}
	c, err := NewChunk(data)
	assert.Nil(err)
	assert.Equal(c.Id, "BSH")
	assert.Equal(c.Length, 240)
	assert.Equal(c.Data[0], uint8(0x28))
	assert.Equal(c.Data[236], uint8(0xFF))
	assert.Equal(c.Data[237], uint8(0xFE))
	assert.Equal(c.Data[238], uint8(0xFE))
	assert.Equal(c.Data[239], uint8(0xFE))
}

func TestReadChunk(t *testing.T) {
	assert := assert.New(t)
	data := []byte{0x49, 0x4E, 0x53, 0x45, 0x4C, 0x35, 0x00, 0x00, 0x7D, 0x21, 0xF1, 0x77, 0xFF, 0xFF, 0xFF, 0xFF, 0x74, 0x00, 0x00, 0x00, 0x07, 0x28, 0x28, 0x00, 0x62, 0x00, 0x9B, 0x00, 0x03, 0x00, 0x05, 0x00, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x11, 0x00, 0x00, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x49, 0x52, 0x53, 0x43, 0x48, 0x32, 0x00, 0x7D, 0x21, 0xF1, 0x77, 0xFF, 0xFF, 0xFF, 0xFF, 0x28, 0x00, 0x00, 0x00, 0x07, 0x18, 0x09, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x18, 0x1D, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x1E, 0x17, 0x00, 0xC2, 0xDA, 0x01, 0x00, 0x07, 0x1E, 0x13, 0x00, 0x02, 0x00,
		0x00, 0x00, 0x07, 0x0A, 0x1B, 0x00, 0x02, 0x00, 0x00, 0x00}
	c, err := ParseChunks(data)
	assert.Nil(err)
	assert.Equal(len(c), 2)
	assert.Equal(c[0].Id, "INSEL5")
	assert.Equal(c[1].Id, "HIRSCH2")
}
