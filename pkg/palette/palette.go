package palette

import (
	"fmt"
	"os"
)

const PALETTE_FILE = "stadtfld.col"

var (
	DefaultPalette Palette = Palette{
		Colors: []Rgb{
			{0, 0, 0}, {128, 0, 0}, {0, 128, 0}, {128, 128, 0}, {0, 0, 128}, {109, 31, 108}, {0, 128, 128},
			{192, 192, 192}, {255, 0, 255}, {255, 0, 255}, {0, 0, 0}, {0, 4, 4}, {0, 8, 8}, {0, 16, 0},
			{11, 6, 3}, {21, 8, 0}, {37, 4, 0}, {0, 20, 4}, {6, 22, 6}, {0, 33, 0}, {3, 38, 3},
			{14, 28, 5}, {8, 49, 4}, {32, 24, 0}, {27, 44, 0}, {10, 12, 18}, {8, 28, 20}, {24, 22, 16},
			{35, 23, 12}, {1, 41, 21}, {12, 44, 19}, {24, 43, 17}, {35, 41, 15}, {10, 22, 37}, {10, 44, 37},
			{36, 31, 31}, {34, 49, 29}, {18, 36, 44}, {38, 46, 41}, {19, 34, 64}, {4, 61, 6}, {16, 59, 6},
			{21, 62, 8}, {37, 61, 4}, {14, 60, 40}, {33, 59, 35}, {41, 61, 32}, {14, 55, 64}, {24, 61, 61},
			{33, 49, 61}, {37, 61, 57}, {17, 58, 72}, {41, 61, 66}, {17, 60, 78}, {17, 58, 94}, {13, 77, 0},
			{37, 78, 0}, {18, 77, 8}, {23, 77, 37}, {28, 77, 72}, {25, 77, 88}, {22, 73, 110}, {17, 95, 3},
			{37, 98, 0}, {22, 93, 61}, {22, 112, 45}, {21, 150, 36}, {25, 124, 107}, {28, 148, 113},
			{0, 82, 140}, {8, 74, 144}, {248, 194, 48}, {8, 82, 148}, {8, 86, 148}, {12, 78, 140}, {23, 82, 136},
			{0, 99, 140}, {24, 94, 140}, {8, 90, 156}, {12, 90, 160}, {18, 99, 148}, {18, 101, 148}, {10, 117, 150},
			{8, 90, 173}, {8, 99, 169}, {12, 103, 165}, {21, 104, 165}, {6, 121, 173}, {19, 115, 171}, {33, 115, 165},
			{10, 118, 181}, {24, 119, 177}, {33, 115, 173}, {33, 123, 177}, {24, 117, 187}, {8, 136, 189},
			{11, 136, 196}, {17, 136, 220}, {33, 156, 132}, {0, 156, 148}, {24, 156, 177}, {0, 156, 214},
			{12, 148, 206}, {196, 120, 94}, {11, 173, 216}, {8, 148, 231}, {8, 148, 239}, {12, 160, 230},
			{28, 152, 226}, {21, 178, 225}, {16, 177, 239}, {24, 189, 231}, {33, 189, 222}, {0, 148, 247},
			{80, 150, 226}, {0, 156, 255}, {224, 138, 108}, {242, 153, 122}, {233, 113, 2}, {255, 125, 2},
			{8, 165, 247}, {251, 216, 52}, {244, 175, 45}, {16, 156, 247}, {24, 148, 239}, {20, 152, 251},
			{255, 252, 157}, {33, 165, 247}, {54, 17, 4}, {74, 17, 4}, {53, 45, 12}, {70, 44, 11}, {60, 74, 11},
			{41, 99, 0}, {59, 90, 19}, {45, 103, 0}, {46, 112, 0}, {45, 99, 8}, {44, 106, 17}, {55, 109, 2},
			{55, 106, 17}, {66, 106, 3}, {68, 108, 16}, {59, 47, 38}, {62, 68, 41}, {59, 61, 64}, {61, 74, 63},
			{60, 97, 45}, {65, 91, 68}, {63, 77, 75}, {60, 99, 75}, {49, 76, 90}, {63, 75, 85}, {46, 98, 90},
			{65, 101, 86}, {58, 95, 104}, {55, 98, 117}, {55, 102, 140}, {94, 22, 5}, {89, 42, 20}, {90, 64, 26},
			{89, 96, 11}, {90, 94, 45}, {88, 80, 70}, {87, 102, 68}, {89, 79, 80}, {85, 103, 80}, {93, 107, 77},
			{90, 88, 89}, {86, 111, 90}, {87, 99, 98}, {88, 102, 117}, {115, 33, 10}, {113, 65, 20}, {111, 95, 17},
			{111, 82, 57}, {108, 111, 65}, {111, 107, 90}, {107, 104, 107}, {143, 29, 4}, {137, 86, 13}, {140, 88, 31},
			{137, 99, 64}, {172, 39, 5}, {166, 93, 37}, {197, 49, 8}, {205, 84, 30}, {41, 126, 2}, {49, 123, 0},
			{53, 127, 0}, {66, 123, 0}, {52, 123, 11}, {54, 123, 20}, {54, 122, 73}, {49, 132, 4}, {66, 132, 0},
			{49, 132, 20}, {64, 132, 22}, {53, 140, 0}, {53, 134, 55}, {49, 141, 50}, {49, 167, 29}, {83, 130, 9},
			{91, 126, 62}, {87, 121, 107}, {108, 123, 103}, {82, 171, 6}, {85, 145, 47}, {89, 182, 41},
			{119, 126, 60}, {119, 119, 105}, {116, 180, 48}, {170, 128, 42}, {145, 125, 103}, {133, 187, 58},
			{202, 172, 52}, {43, 133, 116}, {83, 127, 115}, {127, 124, 115}, {125, 142, 115}, {74, 126, 126},
			{73, 128, 164}, {118, 132, 123}, {118, 135, 143}, {43, 160, 124}, {95, 156, 132}, {45, 181, 136},
			{63, 193, 138}, {92, 169, 189}, {63, 222, 167}, {86, 237, 200}, {144, 137, 123}, {141, 153, 133},
			{152, 149, 127}, {175, 154, 124}, {152, 165, 140}, {152, 178, 141}, {169, 176, 140}, {204, 194, 133},
			{154, 176, 173}, {185, 182, 160}, {179, 200, 167}, {172, 209, 207}, {221, 218, 181}, {225, 239, 226},
			{254, 250, 230}, {0, 148, 255}, {160, 160, 164}, {128, 128, 128}, {255, 0, 0}, {0, 255, 0}, {255, 255, 0},
			{0, 0, 255}, {255, 0, 255}, {0, 255, 255},
		},
		TransparentIndex: 253,
		TransparentColor: Rgb{
			R: 255,
			G: 0,
			B: 255,
		},
	}
)

type Rgb struct {
	R uint8
	G uint8
	B uint8
}

type Palette struct {
	Colors           []Rgb
	TransparentIndex int
	TransparentColor Rgb
}

func NewPalette(file string) (*Palette, error) {
	f, err := os.ReadFile(file)
	if err != nil {
		return nil, err
	}
	return ParsePalette(f)
}

func ParsePalette(data []byte) (*Palette, error) {
	colors := []Rgb{}
	// 20 is the chunk definition int bytes to jump over
	transparentIndex := -1
	colorIndex := 0
	for i := 20; i < len(data)-4; i = i + 4 {
		c := Rgb{
			R: data[i],
			G: data[i+1],
			B: data[i+2],
		}
		colors = append(colors, c)
		// Transparent color hard coded to magenta
		if c.R == 255 && c.G == 0 && c.B == 255 {
			transparentIndex = colorIndex
		}
		colorIndex++
	}
	return &Palette{
		Colors:           colors,
		TransparentIndex: transparentIndex,
		TransparentColor: Rgb{
			R: 255,
			G: 0,
			B: 255,
		},
	}, nil
}

func (p *Palette) GetColor(index int) (*Rgb, error) {
	if index >= len(p.Colors) {
		return nil, fmt.Errorf("cannot get color index. Out of boundaries")
	}
	return &p.Colors[index], nil
}
